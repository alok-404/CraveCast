// src/App.js

import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import './App.css';
import AppRoutes from './routes/AppRoutes';
import Nav from './navbar/Nav';
import { ToastContainer } from 'react-toastify';
import LoginModal from './pages/general/LoginModal'; 
import API from './api/api'; 
import { Loader2 } from 'lucide-react';

const App = () => {
Â  // State will be true if EITHER a user OR a food partner is logged in.
Â  const [isLoggedIn, setIsLoggedIn] = useState(false); 
Â  const [isAuthCheckComplete, setIsAuthCheckComplete] = useState(false);
Â  const location = useLocation();

Â  useEffect(() => {
Â  Â  const checkAuthStatus = async () => {
Â  Â  Â  let loggedIn = false;

Â  Â  Â  // 1. Check for User Authentication
Â  Â  Â  try {
Â  Â  Â  Â  // Server checks for User's cookie
Â  Â  Â  Â  await API.get('/auth/user/profile', { withCredentials: true });
Â  Â  Â  Â  loggedIn = true; // User is logged in
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.log("User not logged in.");
Â  Â  Â  }

Â  Â  Â  // 2. Check for Food Partner Authentication (Only if User isn't logged in)
Â  Â  Â  if (!loggedIn) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // Server checks for Food Partner's cookie
Â  Â  Â  Â  Â  // ðŸ’¡ NOTE: Replace '/auth/partner/profile' with your actual Food Partner status endpoint
Â  Â  Â  Â  Â  await API.get('/auth/partner/profile', { withCredentials: true }); 
Â  Â  Â  Â  Â  loggedIn = true; 

// Food Partner is logged in
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.log("Food Partner not logged in.");
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  setIsLoggedIn(loggedIn);
Â  Â  Â  setIsAuthCheckComplete(true);
Â  Â  };
Â  Â  
Â  Â  checkAuthStatus();
Â  }, []);


Â  // Logic to determine if the modal should be shown
Â  const isAuthPage = location.pathname.startsWith('/user/login') || 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â location.pathname.startsWith('/user/register') ||
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â location.pathname.startsWith('/partner/'); // Assuming partner routes don't need the modal

Â  const shouldShowLoginModal = (
Â  Â  !isLoggedIn && 
Â  Â  isAuthCheckComplete && 
Â  Â  !isAuthPage // Do not show on auth pages
Â  );


Â  if (!isAuthCheckComplete) {
Â  Â  return (
Â  Â  Â  <div className="flex items-center justify-center min-h-screen">
Â  Â  Â  Â  <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
Â  Â  Â  </div>
Â  Â  ); 
Â  }

Â  return (
Â  Â  <div className='relative'> 
Â  Â  Â  Â  
Â  Â  Â  <main className='pb-16'>
Â  Â  Â  Â  <AppRoutes/>
Â  Â  Â  </main>
Â  Â 
Â  Â  Â  {isLoggedIn && (
Â  Â  Â  Â  <div className='fixed bottom-0 left-0 w-full z-50'>
Â  Â  Â  Â  Â  <Nav/>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  Â  
Â  Â  Â  {shouldShowLoginModal && <LoginModal />}

Â  Â  Â  <ToastContainer position="bottom-center" autoClose={3000} hideProgressBar newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />
Â  Â  </div>
Â  )
}
export default App